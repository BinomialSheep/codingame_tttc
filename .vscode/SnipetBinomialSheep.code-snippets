{
  // Place your CompetitiveProgramming workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }
  "重みなし無向グラフ": {
    "prefix": "snip_in_graph",
    "body": [
      "INT(N, M);",
      "vvi G(N);",
      "// 重みなし無向グラフ",
      "rep(i, M) {",
      "  INT(A, B);",
      "  --A, --B;",
      "  G[A].push_back(B);",
      "  G[B].push_back(A);",
      "}"
    ],
    "description": "重みなし無向グラフ"
  },
  "木の入力（無向）": {
    "prefix": "snip_in_tree",
    "body": [
      "INT(N);",
      "vvi G(N);",
      "rep(i, N - 1) {",
      "  INT(a, b);",
      "  --a, --b;",
      "  G[a].push_back(b);",
      "  G[b].push_back(a);",
      "}"
    ],
    "description": "木の入力"
  },
  "セグ木テンプレ（RMQ）": {
    "prefix": "snip_seg_RMQ",
    "body": [
      "const int INF = int((1LL << 31) - 1);",
      "// 要ACL https://atcoder.github.io/ac-library/document_ja/segtree.html",
      "using S = int;  // 型エイリアス",
      "// 二項演算S op(S a, S b)",
      "auto op = [](S a, S b) -> S { return min(a, b); };",
      "// 単位元 S e()",
      "auto e = []() -> S { return INF; };",
      "segtree<S, op, e> seg(N);  // A(N, e)で初期化",
      "// segtree<S, op, e> seg(A); //"
    ],
    "description": "セグ木テンプレ（RMQ）"
  },
  "順列全探索": {
    "prefix": "snip_permutation_enumeration ",
    "body": [
      "vi perm(N);",
      "iota(all(perm), 0);",
      "do {",
      "//",
      "} while (next_permutation(all(perm)));"
    ],
    "description": "順列全探索"
  },
  "シンプルなテンプレート": {
    "prefix": "snip_template_simple",
    "body": [
      "#include <bits/stdc++.h>",
      "using namespace std;",
      "",
      "int main() {",
      "  ",
      "",
      "  return 0;",
      "}"
    ],
    "description": "シンプルなテンプレート"
  },
  "Edge": {
    "prefix": "snip_Edge",
    "body": [
      "class Edge {",
      " public:",
      "  int source, target, cost;",
      "  Edge(int s, int t, int c) : source(s), target(t), cost(c) {}",
      "  bool operator<(Edge &e) { return cost < e.cost; }",
      "};"
    ],
    "description": "Edge"
  },
}